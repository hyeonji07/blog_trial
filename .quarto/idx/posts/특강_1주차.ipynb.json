{"title":"1일차 과제","markdown":{"yaml":{"title":"1일차 과제","author":"전현지","date":"01/02/2024","categories":["Data_ToolBox"]},"headingText":"0. Intro","containsRefs":false,"markdown":"\n\n\n## 컴퓨터?\n- 컴퓨터는 **폴더**임.\n\n## 가상환경이란?\n\n\n- 가상의 컴퓨터(꼭 필요한 폴더 집합)를 만드는 것임.\n- like 사용자 계정 추가\n- 각각의 가상환경 & 컴퓨터는 독립적임\n\n## 아나콘다?\n\n- 가상 환경을 만들어주는 프로그램.\n- 본인이 원하는 환경 만들고 싶음 만들 수 있음.(ex : conda create --name <가상환경이름> python=3.8)  \n\n`-` **[정리]**  \n- 컴퓨터 == 폴더 집합  \n- 가상환경 == 가상의 컴퓨터 == 폴더  \n- 아나콘다는 가상환경을 만들어주는 프로그램  \n\n\n`-` 그럼 가상환경 어디에 설치되어 있는데?  \n- anaconda3 > envs  \n- 가상환경 폴더를 삭제 or 다른 경로로 이동하면? -> 가상환경 사라지는거임 ㅇㅇ\n\n\n# 1. 가상환경\n\n`-` 그래서 왜 가상환경을 써야하는가?\n- **패키지 충돌을 피하기 위함.**\n\n`-` 패키지 충돌은 왜 발생하는데?  \n- 오픈소스 -> 누구나 본인이 만든 패키지 배포 가능  \n- 누군가가 배포한 A라는 패키지를 기반으로한 새로운 패키지(B) 만들 수 있음.  \n- 근데 A 패키지 버전이 업데이트되면서 기존에 있었던 함수가 사라지거나 달라진다면?  \n- 패키지 B가 작동하지 않을 수 있음 (이러한 의존 관계가 물리고 물려있다면? 대환장파티 ㅇㅇ)  \n=> 이것이 패키지 충돌임 ㅇㅅㅇ\n\n`-` 그럼 어떻게 충돌을 피할 수 있는데?  \n- 충돌이 안나는 패키지 버전 조합을 찾아주면됨.\n\n`-` 그 조합 정보를 어디서 찾는데?  \n- 아나콘다에서는 **채널** 이라고 부름 (채널에 패키지 버전 조합들이 잘 정리되어 있음.)  \n  - conda forge  \n  - r  \n  - pytorch 등이 있음.  \n- 채널에 있는 정보를 사용해, 패키지B 충돌 안나게 설치하기  \n예시 : conda install -c python B  \n- 별로인 채널도 있으니, 보장된 채널 사용 추천함\n\n`-` 무튼 정리하자면  \n- base에 패키지 여러개 깔았는데, 충돌 발생 & 돌이킬 수 없는 강을 건넜다?   \n-> 아나콘다 자체를 삭제하고 재설치 해야할 수도 있음.(그럼 패키지 설치 A to Z 다시해야 함.)  \n- but, 가상환경을 사용했다면?  \n문제가 되는 가상환경만 삭제해주면, 다른건 괜찮은 거임.    \nex) 님이 만약 base에 A, B, numpy, pytorch, yolo 패키지를 깔았어 근데 패키지 충돌이 발생했다?  \n -> 싹 날리고 재설치 해야할 수 있음  \nbut, 가상환경으로 패키지 분리해서 설치되어있다?   \n-> 그럼 문제되는 패키지가 있는 가상환경만 삭제해주면 됨.\n\n# 2. 파이썬 개발환경\n\n`-` 파이썬 개발환경 구축방법이 많은 이유?  \n- 1. 노트북 vs 노트북 가상환경 vs 원격 vs 클라우드  \n- 2. ipython, python, anaconda(파이썬 자동설치), 클라우드  \n- 3. IDE 종류 다양 (주피터, 스파이더, 파이참, atom, vscode 등)\n\n`-` **[목적]**  \n\n무튼 이렇게 다양한데, 이를 관통하는 원리를 살펴보자!\n\n## Python 개발환경 발전 과정\n- 이해를 위해 임의로 5세대로 구분함\n\n### 1세대\n- python, ipython\n\n#### python\n- if 아나콘다 설치한 경우 -> anaconda prompt 실행 > python 입력 > prompt 창에서 파이썬 실행 가능한\n- elif 노트북에 파이썬 설치한 경우 -> 명령prompt 실행 > python 입력 > python 실행 가능한\n\n`-` 2개의 prompt를 사용해 파이썬 코드를 실행할 수 있음. but, 각각의 prompt는 **독립**적   \n-> so, **변수 공유 can't**  \n\n`-` ?sort와 같은 도움말 기능 x, 구문 강조 기능 x, 자동 들여쓰기x\n\n`-` 한 번 실행 or 줄 바꿈 했을 경우, 틀린 부분이 있다면 그냥 망한거임.\n처음부터 끝까지 코드 다시 쳐야 함...   \n\n\n\n#### ipython\n\n*얘는 그냥 python깔면 깔리는건 아닌것 같음.*\n\n`-` 자동 들여쓰기 o, 구문강조 0 , 도움말 o, 줄바꿈 했어도 방향키 조절로 틀린 부분 수정 가능\n\n`-` but, prompt 한번 끄면 이전 코드 다 없어짐.\n-> 코드 관리가 어려움.\n\n### 2세대\n- 메모장 + anaconda prompt 이용(.py를 이용한 python 활용)\n- focus : 마우스를 이용한 코드 편집 가능, 코드 관리 용이성(저장되어 있으면 좋겠음)\n\n`-` 역할   \n- 메모장 == 코드 편집 & 저장\n- prompt == 계산기\n\n`-` 실행방법  \n- 메모장 확장자를 .py로 변경  \n- prompt에서 해당 메모장이 저장된 경로로 이동  \n- 실행 : python 메모장이름.py\n\n`-` **[정리]**  \n- 마우스로 코드 편집 가능 & 메모장(코드 편집기)가 저장되어 있음 == 코드가 저장되어 있음  \n- but, 단점 == 구문강조 x, 도움말 x\n\n### 3세대\n- 메모장 + ipython\n- !python 메모장 이름.py\n- %run 메모장 이름\n\n`-` 메모장(코드 편집 & 저장) 사용하는건 동일\n\n\n`-` but,  ipython 사용  \n- anaconda prompt처럼 코드 실행 및 결과 확인 기능 있어야함.  \n- ipython 장점은 have -> 구문강조 o , 도움말 o\n\n`-` 어떻게 하냐?  \n- ipython 실행  \n- !python 메모장이름.py\n\n`-` 이게 어떻게 가능하냐?  \n- !(느낌표)의 기능 주목  \n- !python 메모장이름.py  \n- 원래 ipython 환경이었지만, 해당 내용을 새로운 prompt(ipython X)에서 해당 코드 내용을 실행하고 결괏값을 현재 anaconda 창에 띄워주는거임  \n- so, 변수는 공유되지 않음 (각각의 prompt는 독립적 <1세대 설명 참고>)\n\n`-` 변수 공유 필요하다?  \n- %run 메모장 이름 입력  \n- 얘는 메모장의 내용을, 현재 prompt 에 복붙하고, 결과만 출력하는 것과 같은 효과임\n\n### 4세대\n- IDE(통합개발환경) == 메모장 + ipython  한방에~\n\n`-` 주피터로 예를 들어 설명 (모든 IDE 같은 논리임)  \n- 주피터는 그냥 입출력을 깔끔하게 보여주는 인터페이스임.  \n- 계산은 ipython이 다함.  \n- cell 하나가 하나의 메모장임.  \n- cell의 내용을 ipython이 계산 & 결괏값 출력\n- 주피터가 그 결괏값을 복사 해와서 user한테 보여줌.  \n=> prompt는 하나니깐, 변수 공유 가능한. 메모장만 여러개인 거임.\n\n`-` 커널 재시작  \n- prompt를 끄고 새창을 키는것과 같음\n\n`-` 커널 정지?(무튼 네모 누르기)  \n- prompt에서 ctrl + c 누르는 효과와 같음\n\n`-` **[정리]**  \n- IDE는 그냥 복붙해주는 인터페이스임, 연산 기능 x  \n- 실제 연산은 python, or R이 다 함  \n- 때문에, IDE만 설치한다고 해서 연산을 수행할 수 x, 무조건 R이나 python을 먼저 설치하고 IDE를 실행할 수 있음  \n- 하나의 IDE가 여러 언어와 연결될 수 있음  \n\n### 5세대 : 가상컴퓨터(anaconda), 원격 컴퓨터(server), 클라우드 컴퓨터(colab)\n\n#### 가상컴퓨터\n\n`-` 위 1.가상환경에서 정리한 내용과 같음\n\n#### 원격 컴퓨터\n- ipython이 실행되는 컴퓨터와 크롬이 실행되는 컴퓨터가 동일하지 않아도 인터넷에만 연결되어 있으면 작동\n\n`-` 방법1 : just 원격 컴퓨터  \n- 좋은 성능을 가진 컴퓨터를 여러명이 공유해서 사용하는 것.  \n- 메모장 == 내 노트북 IDE  \n- 실제 python or R이 실행되는 곳 == 원격 컴퓨터 prompt  \n- 이제까지의 IDE 환경에서의 코드 작동 매커니즘과 같지만, python이 어디서 실행되는지만 다름  \n- 논리적 분리가 안되어있기 때문에, 누군가 돌이킬 수 없는 강을 건너면 서버를 공유하고 있는 모든 사람이 서버를 사용하지 못하게 될 수 있음\n\n`-` 방법 2 :  원격컴퓨터 + 가상환경  \n- 서버를 논리적으로 나누기 (가상환경과 같음)  \n- 코드를 실현하는 매커니즘은 방법1과 같음   \n- but, 가상환경과 같이 분리가 되어있기 때문에 문제가 발생했을 경우, 다른 user에게 영향 x just 해당하는 환경만 삭제해주면됨.\n\n#### 클라우드 컴퓨터\n\n`-` 클라우드 컴퓨터가 뭔데?  \n- 성능이 그저그런 컴퓨터 여러개를 모아서, user에게 할당  \n- ex) m개의 컴퓨터를 n명의 user에게 할당 -> 1인당 m/n 대 할당\n\n\n","srcMarkdownNoYaml":"\n\n# 0. Intro\n\n## 컴퓨터?\n- 컴퓨터는 **폴더**임.\n\n## 가상환경이란?\n\n\n- 가상의 컴퓨터(꼭 필요한 폴더 집합)를 만드는 것임.\n- like 사용자 계정 추가\n- 각각의 가상환경 & 컴퓨터는 독립적임\n\n## 아나콘다?\n\n- 가상 환경을 만들어주는 프로그램.\n- 본인이 원하는 환경 만들고 싶음 만들 수 있음.(ex : conda create --name <가상환경이름> python=3.8)  \n\n`-` **[정리]**  \n- 컴퓨터 == 폴더 집합  \n- 가상환경 == 가상의 컴퓨터 == 폴더  \n- 아나콘다는 가상환경을 만들어주는 프로그램  \n\n\n`-` 그럼 가상환경 어디에 설치되어 있는데?  \n- anaconda3 > envs  \n- 가상환경 폴더를 삭제 or 다른 경로로 이동하면? -> 가상환경 사라지는거임 ㅇㅇ\n\n\n# 1. 가상환경\n\n`-` 그래서 왜 가상환경을 써야하는가?\n- **패키지 충돌을 피하기 위함.**\n\n`-` 패키지 충돌은 왜 발생하는데?  \n- 오픈소스 -> 누구나 본인이 만든 패키지 배포 가능  \n- 누군가가 배포한 A라는 패키지를 기반으로한 새로운 패키지(B) 만들 수 있음.  \n- 근데 A 패키지 버전이 업데이트되면서 기존에 있었던 함수가 사라지거나 달라진다면?  \n- 패키지 B가 작동하지 않을 수 있음 (이러한 의존 관계가 물리고 물려있다면? 대환장파티 ㅇㅇ)  \n=> 이것이 패키지 충돌임 ㅇㅅㅇ\n\n`-` 그럼 어떻게 충돌을 피할 수 있는데?  \n- 충돌이 안나는 패키지 버전 조합을 찾아주면됨.\n\n`-` 그 조합 정보를 어디서 찾는데?  \n- 아나콘다에서는 **채널** 이라고 부름 (채널에 패키지 버전 조합들이 잘 정리되어 있음.)  \n  - conda forge  \n  - r  \n  - pytorch 등이 있음.  \n- 채널에 있는 정보를 사용해, 패키지B 충돌 안나게 설치하기  \n예시 : conda install -c python B  \n- 별로인 채널도 있으니, 보장된 채널 사용 추천함\n\n`-` 무튼 정리하자면  \n- base에 패키지 여러개 깔았는데, 충돌 발생 & 돌이킬 수 없는 강을 건넜다?   \n-> 아나콘다 자체를 삭제하고 재설치 해야할 수도 있음.(그럼 패키지 설치 A to Z 다시해야 함.)  \n- but, 가상환경을 사용했다면?  \n문제가 되는 가상환경만 삭제해주면, 다른건 괜찮은 거임.    \nex) 님이 만약 base에 A, B, numpy, pytorch, yolo 패키지를 깔았어 근데 패키지 충돌이 발생했다?  \n -> 싹 날리고 재설치 해야할 수 있음  \nbut, 가상환경으로 패키지 분리해서 설치되어있다?   \n-> 그럼 문제되는 패키지가 있는 가상환경만 삭제해주면 됨.\n\n# 2. 파이썬 개발환경\n\n`-` 파이썬 개발환경 구축방법이 많은 이유?  \n- 1. 노트북 vs 노트북 가상환경 vs 원격 vs 클라우드  \n- 2. ipython, python, anaconda(파이썬 자동설치), 클라우드  \n- 3. IDE 종류 다양 (주피터, 스파이더, 파이참, atom, vscode 등)\n\n`-` **[목적]**  \n\n무튼 이렇게 다양한데, 이를 관통하는 원리를 살펴보자!\n\n## Python 개발환경 발전 과정\n- 이해를 위해 임의로 5세대로 구분함\n\n### 1세대\n- python, ipython\n\n#### python\n- if 아나콘다 설치한 경우 -> anaconda prompt 실행 > python 입력 > prompt 창에서 파이썬 실행 가능한\n- elif 노트북에 파이썬 설치한 경우 -> 명령prompt 실행 > python 입력 > python 실행 가능한\n\n`-` 2개의 prompt를 사용해 파이썬 코드를 실행할 수 있음. but, 각각의 prompt는 **독립**적   \n-> so, **변수 공유 can't**  \n\n`-` ?sort와 같은 도움말 기능 x, 구문 강조 기능 x, 자동 들여쓰기x\n\n`-` 한 번 실행 or 줄 바꿈 했을 경우, 틀린 부분이 있다면 그냥 망한거임.\n처음부터 끝까지 코드 다시 쳐야 함...   \n\n\n\n#### ipython\n\n*얘는 그냥 python깔면 깔리는건 아닌것 같음.*\n\n`-` 자동 들여쓰기 o, 구문강조 0 , 도움말 o, 줄바꿈 했어도 방향키 조절로 틀린 부분 수정 가능\n\n`-` but, prompt 한번 끄면 이전 코드 다 없어짐.\n-> 코드 관리가 어려움.\n\n### 2세대\n- 메모장 + anaconda prompt 이용(.py를 이용한 python 활용)\n- focus : 마우스를 이용한 코드 편집 가능, 코드 관리 용이성(저장되어 있으면 좋겠음)\n\n`-` 역할   \n- 메모장 == 코드 편집 & 저장\n- prompt == 계산기\n\n`-` 실행방법  \n- 메모장 확장자를 .py로 변경  \n- prompt에서 해당 메모장이 저장된 경로로 이동  \n- 실행 : python 메모장이름.py\n\n`-` **[정리]**  \n- 마우스로 코드 편집 가능 & 메모장(코드 편집기)가 저장되어 있음 == 코드가 저장되어 있음  \n- but, 단점 == 구문강조 x, 도움말 x\n\n### 3세대\n- 메모장 + ipython\n- !python 메모장 이름.py\n- %run 메모장 이름\n\n`-` 메모장(코드 편집 & 저장) 사용하는건 동일\n\n\n`-` but,  ipython 사용  \n- anaconda prompt처럼 코드 실행 및 결과 확인 기능 있어야함.  \n- ipython 장점은 have -> 구문강조 o , 도움말 o\n\n`-` 어떻게 하냐?  \n- ipython 실행  \n- !python 메모장이름.py\n\n`-` 이게 어떻게 가능하냐?  \n- !(느낌표)의 기능 주목  \n- !python 메모장이름.py  \n- 원래 ipython 환경이었지만, 해당 내용을 새로운 prompt(ipython X)에서 해당 코드 내용을 실행하고 결괏값을 현재 anaconda 창에 띄워주는거임  \n- so, 변수는 공유되지 않음 (각각의 prompt는 독립적 <1세대 설명 참고>)\n\n`-` 변수 공유 필요하다?  \n- %run 메모장 이름 입력  \n- 얘는 메모장의 내용을, 현재 prompt 에 복붙하고, 결과만 출력하는 것과 같은 효과임\n\n### 4세대\n- IDE(통합개발환경) == 메모장 + ipython  한방에~\n\n`-` 주피터로 예를 들어 설명 (모든 IDE 같은 논리임)  \n- 주피터는 그냥 입출력을 깔끔하게 보여주는 인터페이스임.  \n- 계산은 ipython이 다함.  \n- cell 하나가 하나의 메모장임.  \n- cell의 내용을 ipython이 계산 & 결괏값 출력\n- 주피터가 그 결괏값을 복사 해와서 user한테 보여줌.  \n=> prompt는 하나니깐, 변수 공유 가능한. 메모장만 여러개인 거임.\n\n`-` 커널 재시작  \n- prompt를 끄고 새창을 키는것과 같음\n\n`-` 커널 정지?(무튼 네모 누르기)  \n- prompt에서 ctrl + c 누르는 효과와 같음\n\n`-` **[정리]**  \n- IDE는 그냥 복붙해주는 인터페이스임, 연산 기능 x  \n- 실제 연산은 python, or R이 다 함  \n- 때문에, IDE만 설치한다고 해서 연산을 수행할 수 x, 무조건 R이나 python을 먼저 설치하고 IDE를 실행할 수 있음  \n- 하나의 IDE가 여러 언어와 연결될 수 있음  \n\n### 5세대 : 가상컴퓨터(anaconda), 원격 컴퓨터(server), 클라우드 컴퓨터(colab)\n\n#### 가상컴퓨터\n\n`-` 위 1.가상환경에서 정리한 내용과 같음\n\n#### 원격 컴퓨터\n- ipython이 실행되는 컴퓨터와 크롬이 실행되는 컴퓨터가 동일하지 않아도 인터넷에만 연결되어 있으면 작동\n\n`-` 방법1 : just 원격 컴퓨터  \n- 좋은 성능을 가진 컴퓨터를 여러명이 공유해서 사용하는 것.  \n- 메모장 == 내 노트북 IDE  \n- 실제 python or R이 실행되는 곳 == 원격 컴퓨터 prompt  \n- 이제까지의 IDE 환경에서의 코드 작동 매커니즘과 같지만, python이 어디서 실행되는지만 다름  \n- 논리적 분리가 안되어있기 때문에, 누군가 돌이킬 수 없는 강을 건너면 서버를 공유하고 있는 모든 사람이 서버를 사용하지 못하게 될 수 있음\n\n`-` 방법 2 :  원격컴퓨터 + 가상환경  \n- 서버를 논리적으로 나누기 (가상환경과 같음)  \n- 코드를 실현하는 매커니즘은 방법1과 같음   \n- but, 가상환경과 같이 분리가 되어있기 때문에 문제가 발생했을 경우, 다른 user에게 영향 x just 해당하는 환경만 삭제해주면됨.\n\n#### 클라우드 컴퓨터\n\n`-` 클라우드 컴퓨터가 뭔데?  \n- 성능이 그저그런 컴퓨터 여러개를 모아서, user에게 할당  \n- ex) m개의 컴퓨터를 n명의 user에게 할당 -> 1인당 m/n 대 할당\n\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"output-file":"특강_1주차.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","theme":"cosmo","title-block-banner":true,"title":"1일차 과제","author":"전현지","date":"01/02/2024","categories":["Data_ToolBox"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}